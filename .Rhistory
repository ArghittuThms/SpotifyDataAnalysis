genre_analysis %>%
ggplot(aes(x = value)) +
geom_density(aes(color = genre)) +
facet_wrap(~name, ncol = 3, scales = 'free') +
labs(title = 'Genre Characteristic',x = '', y = '') +
theme_bw() +
theme(axis.text.x = element_text(angle = 50, hjust = 1),axis.text.y = element_blank())
knit_with_parameters("~/Università/DataScience/SpotifyDataScience/SpotifyDataAnalysisMarkdown.Rmd", encoding = "UTF-8")
# Grafico
ggplot(data = top_200_song, mapping = aes(x = duration_s)) +
geom_density(aes(color = genre)) +
labs(title = 'Duration in sec of most popularity song',x = '', y = '') +
theme_bw() +
theme(axis.text.x = element_text(angle = 50, hjust = 1),axis.text.y = element_blank())
all_genre_top_artist <- readRDS(file = "all_genre_top_artist.Rds")
audio_features <- all_genre_top_artist %>%
select(top.song)
knitr::opts_chunk$set(cache = TRUE)
#load(file = "datidausare.RData")
library(dplyr)      # Manipolazione dei dati
library(ggplot2)    # Creazione dei grafici
library(purrr)      # Toolkit che aggiunge funzionalità ad R
library(modelr)     # Manipolazione dei dati
library(broom)      # Converte data-frame in strutture dati tipo tibbles
library(tidyr)      # Manipolazione dei dati
library(spotifyr)   # Metodi per utilizzo delle APIs Spotify
library(corrplot)   # Grafici di correlazione
library(DT)         # Stampa tabelle su html
all_genre_top_artist <- readRDS(file = "all_genre_top_artist.Rds")
audio_features <- all_genre_top_artist %>%
select(top.song)
# Unnest della colonna top.song a livello superiore
audio_features <- unnest(audio_features, top.song)
# Eliminazione di colonne rindondanti (che posso causare anche collisioni con il
# prossimo unnest)
audio_features <- audio_features %>%
select(genre, name, popularity, explicit, song.features)
# Unnest della colonna song.features a livello superiore (data-frame allo stesso livello)
audio_features <- unnest(audio_features, song.features)
# Creazione nuova colonna duration_s (conversione della colonna duration_ms in secondi)
audio_features <- audio_features %>%
mutate(duration_s = map(duration_ms, function(x){x/1000}))
# Assegnazione tipo numerico alla nuova colonna duration_s
audio_features$duration_s <- as.numeric(audio_features$duration_s)
# Analisi caratteristiche di ogni genere
# Creazione data-frame per visualizzazione delle caratteristiche di ogni genere
temp <- names(audio_features)[c(5, 6, 8, 10:15)]
genre_analysis <- audio_features %>%
select(c("genre", temp)) %>%
pivot_longer(cols = temp, values_transform = as.numeric)
# Creazione grafico
genre_analysis %>%
ggplot(aes(x = value)) +
geom_density(aes(color = genre)) +
facet_wrap(~name, ncol = 3, scales = 'free') +
labs(title = 'Genre Characteristic',x = '', y = '') +
theme_bw() +
theme(axis.text.x = element_text(angle = 50, hjust = 1),axis.text.y = element_blank())
# Creazione data-frame per visualizzazione delle caratteristiche generali di ogni genere
genre_analysis_average <- audio_features %>%
group_by(genre) %>%
nest() %>%
mutate(av_duration = map(data, function(x){mean(x$duration_s, na.rm = TRUE)})) %>%
mutate(av_energy = map(data, function(x){mean(x$energy, na.rm = TRUE)})) %>%
mutate(av_tempo = map(data, function(x){mean(x$tempo, na.rm = TRUE)})) %>%
mutate(av_danceability = map(data, function(x){mean(x$danceability, na.rm = TRUE)})) %>%
mutate(av_valence = map(data, function(x){mean(x$valence, na.rm = TRUE)})) %>%
select(-data, -av_duration, -av_tempo)
# Gathering data-frame (portare le variabili a valori)
genre_analysis_average <- gather(genre_analysis_average, 'av_energy', 'av_danceability',
'av_valence', key = "Characteristic",
value = "value")
# Riordinamento data-frame per genere
genre_analysis_average <- genre_analysis_average %>%
arrange(genre)
# Assegnazione tipo numerico alla colonna value
genre_analysis_average$value <- as.numeric(genre_analysis_average$value)
# Creazione grafico
ggplot(genre_analysis_average, aes(fill=Characteristic, y=value, x=genre)) +
geom_bar(position="dodge", stat="identity") +
theme_bw()
genre_characteristic <- audio_features %>%
ungroup() %>%
select(popularity, danceability, energy, key, loudness, mode, speechiness,acousticness,
instrumentalness, liveness, valence, tempo, duration_ms)
# Visualizzazione data-frame con corrplot
corrplot(cor(genre_characteristic, use="pairwise.complete.obs"),
method = "color",
type = "upper",
order = "original")
# Creazione data-frame con le 200 canzoni più popolari
top_200_song <- audio_features %>%
select(popularity, danceability, energy, key, loudness, mode, speechiness,acousticness,
instrumentalness, liveness, valence, tempo, duration_s) %>%
arrange(desc(popularity)) %>%
head(200)
top_200_song %>%
count(genre) %>%
ggplot() +
geom_col(aes(x = genre, y = n, fill = genre)) +
coord_polar() +
theme_bw() +
theme(axis.text.x = element_text(hjust = 1), axis.text.y = element_text(hjust = 1)) +
ggtitle("Genre of most popular song") +
xlab("Song Genre") +
ylab("Number of songs")
temp3 <- names(top_200_song)[c(3,4,6,8:13)]
top_200_analysis <- top_200_song %>%
select(c("genre", temp3)) %>%
pivot_longer(cols = temp3)
# Grafico che mostra le caratteristiche delle canzoni più popolari
top_200_analysis %>%
ggplot(aes(x = name, y = value)) +
geom_jitter(aes(color = genre)) +
facet_wrap(~name, ncol = 3, scales = 'free') +
labs(title = 'Audio Feature Pattern Frequency Plots', x = '', y = '') +
theme_bw()+
theme(axis.text.y = element_blank(), axis.text.x = element_blank())
# Grafico
ggplot(data = top_200_song, mapping = aes(x = duration_s)) +
geom_density(aes(color = genre)) +
labs(title = 'Duration in sec of most popularity song',x = '', y = '') +
theme_bw() +
theme(axis.text.x = element_text(angle = 50, hjust = 1),axis.text.y = element_blank())
# Grafico
ggplot(data = top_200_song, mapping = aes(x = key, fill = genre)) +
geom_bar(aes(color = genre), position="dodge") +
labs(title = 'Key of most popularity song',x = '', y = '') +
theme_bw() +
scale_x_continuous(breaks = 0:11, labels = c("C", "C #", "D", "D #", "E", "F",
"F #", "G", "G #", "A", "A #", "B")) +
theme(axis.text.x = element_text(angle = 50, hjust = 1), axis.text.y = element_blank())
ggplot(data = top_200_song, mapping = aes(x = key)) +
geom_density(aes(color = genre)) +
labs(title = 'Key of most popularity song',x = '', y = '') +
theme_bw() +
scale_x_continuous(breaks = 0:11, labels = c("C", "C #", "D", "D #", "E", "F",
"F #", "G", "G #", "A", "A #", "B")) +
theme(axis.text.x = element_text(angle = 50, hjust = 1), axis.text.y = element_blank())
# Data-frame
top_10_song <- all_genre_top_artist %>%
select(genre, name, top.song)
colnames(top_10_song)[2] <- "artist.name"
top_10_song <- unnest(top_10_song, top.song)
top_10_song <- top_10_song %>%
arrange(desc(popularity))
top_10_song <- top_10_song[!duplicated(top_10_song$name), ]
top_10_song <- top_10_song %>%
head(10) %>%
select(-id, -track_number, -album.id, -album.name,
-album.total_tracks, -album.type, -duration_ms)
top_10_song <- unnest(top_10_song, song.features)
# Creazione nuova colonna duration_s (conversione della
# colonna duration_ms in secondi)
top_10_song <- top_10_song %>%
mutate(duration_s = map(duration_ms, function(x){x/1000}))
# Assegnazione tipo numerico alla nuova colonna duration_s
top_10_song$duration_s <- as.numeric(top_10_song$duration_s)
ggplot(data = top_10_song, mapping = aes(x = name, y = acousticness, fill = genre, shape = genre)) +
geom_col() +
theme_bw() +
theme(axis.text.x = element_text(angle = 25, hjust = 0.5)) +
ggtitle('Acousticness', subtitle = 'For top 10 songs on Spotify')
ggplot(data = top_10_song, mapping = aes(x = name, y = loudness, fill = genre, shape = genre)) +
geom_col() +
theme_bw() +
theme(axis.text.x = element_text(angle = 25, hjust = 0.5)) +
ggtitle('Acousticness', subtitle = 'For top 10 songs on Spotify')
ggplot(data = top_10_song, mapping = aes(x = name, y = valence, fill = genre, shape = genre)) +
geom_col() +
theme_bw() +
theme(axis.text.x = element_text(angle = 25, hjust = 0.5)) +
ggtitle('Acousticness', subtitle = 'For top 10 songs on Spotify')
ggplot(data = top_10_song, mapping = aes(x = name, y = valence, fill = genre, shape = genre)) +
geom_col() +
theme_bw() +
theme(axis.text.x = element_text(angle = 25, hjust = 0.5)) +
ggtitle('Valence', subtitle = 'For top 10 songs on Spotify')
ggplot(data = top_10_song, mapping = aes(x = name, y = loudness, fill = genre, shape = genre)) +
geom_col() +
theme_bw() +
theme(axis.text.x = element_text(angle = 25, hjust = 0.5)) +
ggtitle('Loudness', subtitle = 'For top 10 songs on Spotify')
ggplot(data = top_10_song, mapping = aes(x = name, y = danceability, fill = genre, shape = genre)) +
geom_col() +
theme_bw() +
theme(axis.text.x = element_text(angle = 25, hjust = 0.5)) +
ggtitle('Danceability', subtitle = 'For top 10 songs on Spotify')
ggplot(data = top_10_song, mapping = aes(x = name, y = danceability,
fill = genre, shape = genre)) +
geom_col() +
theme_bw() +
theme(axis.text.x = element_text(angle = 25, hjust = 0.5)) +
ggtitle('Danceability', subtitle = 'For top 10 songs on Spotify')
audio_features <- all_genre_top_artist %>%
select(top.song)
# Unnest della colonna top.song a livello superiore
audio_features <- unnest(audio_features, top.song)
# Eliminazione di colonne rindondanti (che posso causare anche collisioni con il
# prossimo unnest)
audio_features <- audio_features %>%
select(genre, name, popularity, explicit, song.features)
# Unnest della colonna song.features a livello superiore (data-frame allo stesso livello)
audio_features <- unnest(audio_features, song.features)
# Creazione nuova colonna duration_s (conversione della colonna duration_ms in secondi)
audio_features <- audio_features %>%
mutate(duration_s = map(duration_ms, function(x){x/1000}))
# Assegnazione tipo numerico alla nuova colonna duration_s
audio_features$duration_s <- as.numeric(audio_features$duration_s)
# Analisi caratteristiche di ogni genere
# Creazione data-frame per visualizzazione delle caratteristiche di ogni genere
temp <- names(audio_features)[c(5, 6, 8, 10:15)]
genre_analysis <- audio_features %>%
select(c("genre", temp)) %>%
pivot_longer(cols = temp, values_transform = as.numeric)
# Creazione grafico
genre_analysis %>%
ggplot(aes(x = value)) +
geom_density(aes(color = genre)) +
facet_wrap(~name, ncol = 3, scales = 'free') +
labs(title = 'Genre Characteristic',x = '', y = '') +
theme_bw() +
theme(axis.text.x = element_text(angle = 50, hjust = 1),axis.text.y = element_blank())
knitr::opts_chunk$set(cache = TRUE, fig.align = "center")
#load(file = "datidausare.RData")
View(top_10_song)
knitr::kable(top_10_song, "html")
install.packages("kableExtra")
library(dplyr)      # Manipolazione dei dati
library(ggplot2)    # Creazione dei grafici
library(purrr)      # Toolkit che aggiunge funzionalità ad R
library(modelr)     # Manipolazione dei dati
library(broom)      # Converte data-frame in strutture dati tipo tibbles
library(tidyr)      # Manipolazione dei dati
library(spotifyr)   # Metodi per utilizzo delle APIs Spotify
library(corrplot)   # Grafici di correlazione
library(kableExtra) # Stampa tabelle su html
top_10_song %>%
kbl() %>%
kable_styling()
top_10_song %>%
kbl() %>%
kable_styling()
top_10_artist %>%
count(genre) %>%
ggplot() +
geom_col(aes(x = genre, y = n, fill = genre)) +
coord_polar() +
theme_bw() +
theme(axis.text.x = element_text(hjust = 1), axis.text.y = element_text(hjust = 1)) +
ggtitle("Most popular artist genre") +
xlab("Artist genre") +
ylab("Number of time that comapre a genre")
# Data-frame
top_10_artist <- all_genre_top_artist %>%
arrange(desc(popularity)) %>%
head(10)
# Analisi top 10 artisti
top_10_artist %>%
count(genre) %>%
ggplot() +
geom_col(aes(x = genre, y = n, fill = genre)) +
coord_polar() +
theme_bw() +
theme(axis.text.x = element_text(hjust = 1),
axis.text.y = element_text(hjust = 1)) +
ggtitle("Most popular artist genre") +
xlab("Artist genre") +
ylab("Number of time that comapre a genre")
# Data-frame
top_10_artist <- all_genre_top_artist %>%
arrange(desc(popularity)) %>%
head(10)
# Analisi top 10 artisti
top_10_artist %>%
count(genre) %>%
ggplot() +
geom_col(aes(x = genre, y = n, fill = genre)) +
coord_polar() +
theme_bw() +
theme(axis.text.x = element_text(hjust = 1),
axis.text.y = element_text(hjust = 1)) +
ggtitle("Most popular artist genre") +
xlab("Artist genre") +
ylab("Number of time that comapre a genre")
ggplot(data = top_10_song, mapping = aes(x = name, y = danceability,
fill = genre, shape = genre)) +
geom_col() +
theme_bw() +
theme(axis.text.x = element_text(angle = 25, hjust = 0.5)) +
ggtitle('Danceability', subtitle = 'For top 10 songs on Spotify')
knitr::opts_chunk$set(cache = TRUE, fig.align = "center")
#load(file = "datidausare.RData")
library(dplyr)      # Manipolazione dei dati
library(ggplot2)    # Creazione dei grafici
library(purrr)      # Toolkit che aggiunge funzionalità ad R
library(modelr)     # Manipolazione dei dati
library(broom)      # Converte data-frame in strutture dati tipo tibbles
library(tidyr)      # Manipolazione dei dati
library(spotifyr)   # Metodi per utilizzo delle APIs Spotify
library(corrplot)   # Grafici di correlazione
library(kableExtra) # Stampa tabelle su html
all_genre_top_artist <- readRDS(file = "all_genre_top_artist.Rds")
audio_features <- all_genre_top_artist %>%
select(top.song)
# Unnest della colonna top.song a livello superiore
audio_features <- unnest(audio_features, top.song)
# Eliminazione di colonne rindondanti (che posso causare anche collisioni con il
# prossimo unnest)
audio_features <- audio_features %>%
select(genre, name, popularity, explicit, song.features)
# Unnest della colonna song.features a livello superiore (data-frame allo stesso livello)
audio_features <- unnest(audio_features, song.features)
# Creazione nuova colonna duration_s (conversione della colonna duration_ms in secondi)
audio_features <- audio_features %>%
mutate(duration_s = map(duration_ms, function(x){x/1000}))
# Assegnazione tipo numerico alla nuova colonna duration_s
audio_features$duration_s <- as.numeric(audio_features$duration_s)
# Analisi caratteristiche di ogni genere
# Creazione data-frame per visualizzazione delle caratteristiche di ogni genere
temp <- names(audio_features)[c(5, 6, 8, 10:15)]
genre_analysis <- audio_features %>%
select(c("genre", temp)) %>%
pivot_longer(cols = temp, values_transform = as.numeric)
# Creazione grafico
genre_analysis %>%
ggplot(aes(x = value)) +
geom_density(aes(color = genre)) +
facet_wrap(~name, ncol = 3, scales = 'free') +
labs(title = 'Genre Characteristic',x = '', y = '') +
theme_bw() +
theme(axis.text.x = element_text(angle = 50, hjust = 1),axis.text.y = element_blank())
# Creazione data-frame per visualizzazione delle caratteristiche generali di ogni genere
genre_analysis_average <- audio_features %>%
group_by(genre) %>%
nest() %>%
mutate(av_duration = map(data, function(x){mean(x$duration_s, na.rm = TRUE)})) %>%
mutate(av_energy = map(data, function(x){mean(x$energy, na.rm = TRUE)})) %>%
mutate(av_tempo = map(data, function(x){mean(x$tempo, na.rm = TRUE)})) %>%
mutate(av_danceability = map(data, function(x){mean(x$danceability, na.rm = TRUE)})) %>%
mutate(av_valence = map(data, function(x){mean(x$valence, na.rm = TRUE)})) %>%
select(-data, -av_duration, -av_tempo)
# Gathering data-frame (portare le variabili a valori)
genre_analysis_average <- gather(genre_analysis_average, 'av_energy', 'av_danceability',
'av_valence', key = "Characteristic",
value = "value")
# Riordinamento data-frame per genere
genre_analysis_average <- genre_analysis_average %>%
arrange(genre)
# Assegnazione tipo numerico alla colonna value
genre_analysis_average$value <- as.numeric(genre_analysis_average$value)
# Creazione grafico
ggplot(genre_analysis_average, aes(fill=Characteristic, y=value, x=genre)) +
geom_bar(position="dodge", stat="identity") +
theme_bw()
genre_characteristic <- audio_features %>%
ungroup() %>%
select(popularity, danceability, energy, key, loudness, mode, speechiness,acousticness,
instrumentalness, liveness, valence, tempo, duration_ms)
# Visualizzazione data-frame con corrplot
corrplot(cor(genre_characteristic, use="pairwise.complete.obs"),
method = "color",
type = "upper",
order = "original")
# Creazione data-frame con le 200 canzoni più popolari
top_200_song <- audio_features %>%
select(popularity, danceability, energy, key, loudness, mode, speechiness,acousticness,
instrumentalness, liveness, valence, tempo, duration_s) %>%
arrange(desc(popularity)) %>%
head(200)
top_200_song %>%
count(genre) %>%
ggplot() +
geom_col(aes(x = genre, y = n, fill = genre)) +
coord_polar() +
theme_bw() +
theme(axis.text.x = element_text(hjust = 1), axis.text.y = element_text(hjust = 1)) +
ggtitle("Genre of most popular song") +
xlab("Song Genre") +
ylab("Number of songs")
temp3 <- names(top_200_song)[c(3,4,6,8:13)]
top_200_analysis <- top_200_song %>%
select(c("genre", temp3)) %>%
pivot_longer(cols = temp3)
# Grafico che mostra le caratteristiche delle canzoni più popolari
top_200_analysis %>%
ggplot(aes(x = name, y = value)) +
geom_jitter(aes(color = genre)) +
facet_wrap(~name, ncol = 3, scales = 'free') +
labs(title = 'Audio Feature Pattern Frequency Plots', x = '', y = '') +
theme_bw()+
theme(axis.text.y = element_blank(), axis.text.x = element_blank())
# Grafico
ggplot(data = top_200_song, mapping = aes(x = duration_s)) +
geom_density(aes(color = genre)) +
labs(title = 'Duration in sec of most popularity song',x = '', y = '') +
theme_bw() +
theme(axis.text.x = element_text(angle = 50, hjust = 1),axis.text.y = element_blank())
# Grafico
ggplot(data = top_200_song, mapping = aes(x = key, fill = genre)) +
geom_bar(aes(color = genre), position="dodge") +
labs(title = 'Key of most popularity song',x = '', y = '') +
theme_bw() +
scale_x_continuous(breaks = 0:11, labels = c("C", "C #", "D", "D #", "E", "F",
"F #", "G", "G #", "A", "A #", "B")) +
theme(axis.text.x = element_text(angle = 50, hjust = 1), axis.text.y = element_blank())
ggplot(data = top_200_song, mapping = aes(x = key)) +
geom_density(aes(color = genre)) +
labs(title = 'Key of most popularity song',x = '', y = '') +
theme_bw() +
scale_x_continuous(breaks = 0:11, labels = c("C", "C #", "D", "D #", "E", "F",
"F #", "G", "G #", "A", "A #", "B")) +
theme(axis.text.x = element_text(angle = 50, hjust = 1), axis.text.y = element_blank())
# Data-frame
top_10_song <- all_genre_top_artist %>%
select(genre, name, top.song)
colnames(top_10_song)[2] <- "artist.name"
top_10_song <- unnest(top_10_song, top.song)
top_10_song <- top_10_song %>%
arrange(desc(popularity))
top_10_song <- top_10_song[!duplicated(top_10_song$name), ]
top_10_song <- top_10_song %>%
head(10) %>%
select(-id, -track_number, -album.id, -album.name,
-album.total_tracks, -album.type, -duration_ms)
top_10_song <- unnest(top_10_song, song.features)
# Creazione nuova colonna duration_s (conversione della
# colonna duration_ms in secondi)
top_10_song <- top_10_song %>%
mutate(duration_s = map(duration_ms, function(x){x/1000}))
# Assegnazione tipo numerico alla nuova colonna duration_s
top_10_song$duration_s <- as.numeric(top_10_song$duration_s)
ggplot(data = top_10_song, mapping = aes(x = name, y = acousticness,
fill = genre, shape = genre)) +
geom_col() +
theme_bw() +
theme(axis.text.x = element_text(angle = 25, hjust = 0.5)) +
ggtitle('Acousticness', subtitle = 'For top 10 songs on Spotify')
ggplot(data = top_10_song, mapping = aes(x = name, y = loudness,
fill = genre, shape = genre)) +
geom_col() +
theme_bw() +
theme(axis.text.x = element_text(angle = 25, hjust = 0.5)) +
ggtitle('Loudness', subtitle = 'For top 10 songs on Spotify')
ggplot(data = top_10_song, mapping = aes(x = name, y = valence,
fill = genre, shape = genre)) +
geom_col() +
theme_bw() +
theme(axis.text.x = element_text(angle = 25, hjust = 0.5)) +
ggtitle('Valence', subtitle = 'For top 10 songs on Spotify')
ggplot(data = top_10_song, mapping = aes(x = name, y = danceability,
fill = genre, shape = genre)) +
geom_col() +
theme_bw() +
theme(axis.text.x = element_text(angle = 25, hjust = 0.5)) +
ggtitle('Danceability', subtitle = 'For top 10 songs on Spotify')
# Data-frame
top_10_artist <- all_genre_top_artist %>%
arrange(desc(popularity)) %>%
head(10)
# Analisi top 10 artisti
top_10_artist %>%
count(genre) %>%
ggplot() +
geom_col(aes(x = genre, y = n, fill = genre)) +
coord_polar() +
theme_bw() +
theme(axis.text.x = element_text(hjust = 1),
axis.text.y = element_text(hjust = 1)) +
ggtitle("Most popular artist genre") +
xlab("Artist genre") +
ylab("Number of time that comapre a genre")
View(top_10_artist)
# Data-frame
top_10_artist <- all_genre_top_artist %>%
arrange(desc(popularity)) %>%
head(10)
top_10_artist <- all_genre_top_artist %>%
arrange(desc(popularity)) %>%
head(10)
top_10_artist <- all_genre_top_artist %>%
arrange(desc(popularity)) %>%
head(11)
# Creazione data-frame per visualizzazione delle caratteristiche generali di ogni genere
genre_analysis_average <- audio_features %>%
group_by(genre) %>%
nest() %>%
mutate(av_duration = map(data, function(x){mean(x$duration_s, na.rm = TRUE)})) %>%
mutate(av_energy = map(data, function(x){mean(x$energy, na.rm = TRUE)})) %>%
mutate(av_tempo = map(data, function(x){mean(x$tempo, na.rm = TRUE)})) %>%
mutate(av_danceability = map(data, function(x){mean(x$danceability, na.rm = TRUE)})) %>%
mutate(av_valence = map(data, function(x){mean(x$valence, na.rm = TRUE)})) %>%
select(-data, -av_duration, -av_tempo)
# Gathering data-frame (portare le variabili a valori)
genre_analysis_average <- gather(genre_analysis_average, 'av_energy', 'av_danceability',
'av_valence', key = "Characteristic",
value = "value")
# Riordinamento data-frame per genere
genre_analysis_average <- genre_analysis_average %>%
arrange(genre)
# Assegnazione tipo numerico alla colonna value
genre_analysis_average$value <- as.numeric(genre_analysis_average$value)
# Creazione grafico
ggplot(genre_analysis_average, aes(fill=Characteristic, y=value, x=genre)) +
geom_bar(position="dodge", stat="identity") +
theme_bw()+
theme(axis.text.x = element_text(angle = 50, hjust = 1),axis.text.y = element_blank())
View(all_genre_top_artist)
View(all_genre_top_artist)
knitr::opts_chunk$set(echo = FALSE)
all_genre_top_artist <- readRDS(file = "all_genre_top_artist.Rds")
knitr::opts_chunk$set(echo = FALSE, cache = TRUE)
