select(genre, name, top.song)
View(top_10_song)
top_10_song <- all_genre_top_artist %>%
select(genre, name, top.song) %>%
colnames()[2] <- "artist.name"
colnames(top_10_song)[2] <- "artist.name"
top_10_song <- unnest(top_10_song, top.song)
top_10_song <- top_10_song %>%
arrange(desc)
top_10_song <- all_genre_top_artist %>%
select(genre, name, top.song)
colnames(top_10_song)[2] <- "artist.name"
top_10_song <- unnest(top_10_song, top.song)
top_10_song <- top_10_song %>%
arrange(desc(popularity)) %>%
head(10)
top_10_song[!duplicated(top_10_song$name)]
top_10_song[!duplicated(top_10_song$name), ]
top_10_song <- top_10_song %>%
head(10)
top_10_song[!duplicated(top_10_song$name), ]
top_10_song <- all_genre_top_artist %>%
select(genre, name, top.song)
colnames(top_10_song)[2] <- "artist.name"
top_10_song <- unnest(top_10_song, top.song)
top_10_song <- top_10_song %>%
arrange(desc(popularity))
top_10_song <- top_10_song[!duplicated(top_10_song$name), ]
top_10_song <- top_10_song %>%
head(10)
# Creazione nuova colonna duration_s (conversione della colonna duration_ms in secondi)
top_10_song <- top_10_song %>%
mutate(duration_s = map(duration_ms, function(x){x/1000}))
# Assegnazione tipo numerico alla nuova colonna duration_s
top_10_song$duration_s <- as.numeric(top_10_song$duration_s)
top_10_song <- top_10_song %>%
head(10) %>%
select(-id, -track_number, -album.id, -album.name, -album.total_tracks, -album.type)
View(top_10_song[[9]][[1]])
top_10_song <- all_genre_top_artist %>%
select(genre, name, top.song)
colnames(top_10_song)[2] <- "artist.name"
top_10_song <- unnest(top_10_song, top.song)
top_10_song <- top_10_song %>%
arrange(desc(popularity))
top_10_song <- top_10_song[!duplicated(top_10_song$name), ]
top_10_song <- top_10_song %>%
head(10) %>%
select(-id, -track_number, -album.id, -album.name, -album.total_tracks, -album.type)
top_10_song <- unnest(top_10_song, song.features)
# Creazione nuova colonna duration_s (conversione della colonna duration_ms in secondi)
top_10_song <- top_10_song %>%
mutate(duration_s = map(duration_ms, function(x){x/1000}))
# Assegnazione tipo numerico alla nuova colonna duration_s
top_10_song$duration_s <- as.numeric(top_10_song$duration_s)
# Data-frame
top_10_song <- all_genre_top_artist %>%
select(genre, name, top.song)
colnames(top_10_song)[2] <- "artist.name"
top_10_song <- unnest(top_10_song, top.song)
top_10_song <- top_10_song %>%
arrange(desc(popularity))
top_10_song <- top_10_song[!duplicated(top_10_song$name), ]
top_10_song <- top_10_song %>%
head(10) %>%
select(-id, -track_number, -album.id, -album.name, -album.total_tracks, -album.type, -duration_ms)
top_10_song <- unnest(top_10_song, song.features)
# Creazione nuova colonna duration_s (conversione della colonna duration_ms in secondi)
top_10_song <- top_10_song %>%
mutate(duration_s = map(duration_ms, function(x){x/1000}))
# Assegnazione tipo numerico alla nuova colonna duration_s
top_10_song$duration_s <- as.numeric(top_10_song$duration_s)
ggplot(data = top_10_song, mapping = aes(x = name, y = acousticness, fill = genre)) +
geom_bar(aes(color = genre))
ggplot(data = top_10_song, mapping = aes(y = acousticness, fill = genre)) +
geom_bar(aes(color = genre))
ggplot(data = top_10_song, mapping = aes(x = name, y = acousticness, fill = genre, shape = genre)) +
geom_col() +
theme_bw() +
theme(axis.text.x = element_text(angle = 25, hjust = 0.5)) +
ggtitle('Acousticness', subtitle = 'For top 10 songs on Spotify')
ggplot(data = top_10_song, mapping = aes(x = 1:10, y = acousticness, fill = genre, shape = genre)) +
geom_col() +
theme_bw() +
theme(axis.text.x = element_text(angle = 25, hjust = 0.5)) +
ggtitle('Acousticness', subtitle = 'For top 10 songs on Spotify')
ggplot(data = top_10_song, mapping = aes(x = name, y = acousticness, fill = genre, shape = genre)) +
geom_col() +
theme_bw() +
theme(axis.text.x = element_text(angle = 25, hjust = 0.5)) +
ggtitle('Acousticness', subtitle = 'For top 10 songs on Spotify')
ggplot(data = top_10_song, mapping = aes(x = name, y = loudness, fill = genre, shape = genre)) +
geom_col() +
theme_bw() +
theme(axis.text.x = element_text(angle = 25, hjust = 0.5)) +
ggtitle('Acousticness', subtitle = 'For top 10 songs on Spotify')
ggplot(data = top_10_song, mapping = aes(x = name, y = valence, fill = genre, shape = genre)) +
geom_col() +
theme_bw() +
theme(axis.text.x = element_text(angle = 25, hjust = 0.5)) +
ggtitle('Acousticness', subtitle = 'For top 10 songs on Spotify')
ggplot(data = top_10_song, mapping = aes(x = name, y = danceability, fill = genre, shape = genre)) +
geom_col() +
theme_bw() +
theme(axis.text.x = element_text(angle = 25, hjust = 0.5)) +
ggtitle('Acousticness', subtitle = 'For top 10 songs on Spotify')
top_10_artist <- all_genre_top_artist %>%
arrange(desc(popularity)) %>%
head(10)
View(top_10_artist)
top_10_artist %>%
count(genre) %>%
ggplot() +
geom_col(aes(x = genre, y = count(genre), fill = genre)) +
coord_polar() +
theme_bw() +
theme(axis.text.x = element_text(hjust = 1), axis.text.y = element_text(hjust = 1)) +
ggtitle("Genre of most popular song") +
xlab("Song Genre") +
ylab("Number of songs")
top_10_artist %>%
count(genre) %>%
ggplot() +
geom_col(aes(x = genre, y = n, fill = genre)) +
coord_polar() +
theme_bw() +
theme(axis.text.x = element_text(hjust = 1), axis.text.y = element_text(hjust = 1)) +
ggtitle("Genre of most popular song") +
xlab("Song Genre") +
ylab("Number of songs")
top_10_artist %>%
count(genre) %>%
ggplot() +
geom_col(aes(x = genre, y = n, fill = genre)) +
coord_polar() +
theme_bw() +
theme(axis.text.x = element_text(hjust = 1), axis.text.y = element_text(hjust = 1)) +
ggtitle("Genre of most popular song") +
xlab("Artist genre") +
ylab("Number of time that comapre a genre")
install.packages("prettydoc")
library(dplyr)
library(ggplot2)
library(purrr)
library(modelr)
library(broom)
library(tidyr)
library(spotifyr)
library(corrplot)
?purr
?purrr
?modelr
?brooom
?broom
?tidyr
library(dplyr)      # Manipolazione dei dati
library(ggplot2)    # Creazione dei grafici
library(purrr)      # Toolkit che aggiunge funzionalità ad R
library(modelr)     # Manipolazione dei dati
library(broom)      # Converte data-frame in strutture dati tipo tibbles
library(tidyr)      # Manipolazione dei dati
library(spotifyr)   # Metodi per utilizzo delle APIs Spotify
library(corrplot)   # Grafici di correlazione
Sys.setenv(SPOTIFY_CLIENT_ID = '4c0f54d6d78649bc871e2078d15d0b4e')          # Identificatico account Spotify
Sys.setenv(SPOTIFY_CLIENT_SECRET = 'b9d8dff917b047df9cd9882703a8d77a')      # Codice personale per utilizzo APIs
access_token <- get_spotify_access_token()                                  # Restituisce il token
# Identificatico account Spotify
Sys.setenv(SPOTIFY_CLIENT_ID = '4c0f54d6d78649bc871e2078d15d0b4e')
# Codice personale per utilizzo APIs
Sys.setenv(SPOTIFY_CLIENT_SECRET = 'b9d8dff917b047df9cd9882703a8d77a')
# Restituisce il token
access_token <- get_spotify_access_token()
knitr::opts_chunk$set(eval = FALSE)
View(all_genre_top_artist)
View(all_genre_top_artist)
summary(all_genre_top_artist)
summary(all_genre_top_artist)
str(all_genre_top_artist)
top_200_song %>%
count(genre) %>%
ggplot() +
geom_col(aes(x = genre, y = n, fill = genre)) +
coord_polar() +
theme_bw() +
theme(axis.text.x = element_text(hjust = 1), axis.text.y = element_text(hjust = 1)) +
ggtitle("Genre of most popular song") +
xlab("Song Genre") +
ylab("Number of songs")
top_200_analysis <- top_200_song %>%
select(c("genre", temp3)) %>%
pivot_longer(cols = temp3)
temp3 <- names(top_200_song)[c(3,4,6,8:13)]
top_200_analysis <- top_200_song %>%
select(c("genre", temp3)) %>%
pivot_longer(cols = temp3)
temp3 <- names(top_200_song)[c(3,4,6,8:13)]
top_200_analysis <- top_200_song %>%
select(c("genre", temp3)) %>%
pivot_longer(cols = temp3)
# Grafico che mostra le caratteristiche delle canzoni più popolari
top_200_analysis %>%
ggplot(aes(x = name, y = value)) +
geom_jitter(aes(color = genre)) +
facet_wrap(~name, ncol = 3, scales = 'free') +
labs(title = 'Audio Feature Pattern Frequency Plots', x = '', y = '') +
theme_bw()+
theme(axis.text.y = element_blank(), axis.text.x = element_blank())
View(top_10_song)
output_data <- head(all_genre_top_artist, n = 100)
datatable(output_data, filter = 'top', options = list(pageLength = 25))
install.packages("DT")
output_data <- head(all_genre_top_artist, n = 100)
datatable(output_data, filter = 'top', options = list(pageLength = 25))
library(dplyr)      # Manipolazione dei dati
library(ggplot2)    # Creazione dei grafici
library(purrr)      # Toolkit che aggiunge funzionalità ad R
library(modelr)     # Manipolazione dei dati
library(broom)      # Converte data-frame in strutture dati tipo tibbles
library(tidyr)      # Manipolazione dei dati
library(spotifyr)   # Metodi per utilizzo delle APIs Spotify
library(corrplot)   # Grafici di correlazione
library(DT)         # Stampa tabelle su html
output_data <- head(all_genre_top_artist, n = 100)
datatable(output_data, filter = 'top', options = list(pageLength = 25))
output_data <- head(all_genre_top_artist, n = 10)
datatable(output_data, filter = 'top', options = list(pageLength = 10))
output_data <- head(all_genre_top_artist, n = 10)
datatable(output_data, filter = 'top', options = list(pageLength = 10))
output_data <- head(all_genre_top_artist, n = 10)
datatable(output_data, filter = 'top', options = list(pageLength = 10))
output_data <- head(all_genre_top_artist, n = 10)
datatable(output_data, filter = 'top', options = list(pageLength = 10))
output_data <- head(all_genre_top_artist, n = 10)
datatable(output_data, filter = 'top', options = list(pageLength = 10))
all_genre_top_artist <- data.frame() %>%
rbind(pop_top_artist, hip_hop_top_artist, rock_top_artist, metal_top_artist,
latin_top_artist, electronic_top_artist) %>%
group_by(genre) %>%
summarise(genre)
output_data <- head(all_genre_top_artist, n = 10)
datatable(output_data, filter = 'top', options = list(pageLength = 10))
output_data <- head(all_genre_top_artist, n = 10)
datatable(output_data, filter = 'top', options = list(pageLength = 10))
View(all_genre_top_artist)
all_genre_top_artist <- data.frame() %>%
rbind(pop_top_artist, hip_hop_top_artist, rock_top_artist, metal_top_artist, latin_top_artist, electronic_top_artist) %>%
group_by(genre) %>%
summarise(genre)
View(all_genre_top_artist)
all_genre_top_artist <- data.frame() %>%
rbind(pop_top_artist, hip_hop_top_artist, rock_top_artist, metal_top_artist, latin_top_artist, electronic_top_artist) %>%
group_by(genre)
View(all_genre_top_artist)
output_data <- head(all_genre_top_artist, n = 10)
datatable(output_data, filter = 'top', options = list(pageLength = 10))
output_data <- head(all_genre_top_artist, n = 10)
datatable(output_data, filter = 'top', options = list(pageLength = 10))
View(all_genre_top_artist[[8]][[1]])
View(all_genre_top_artist[[8]][[1]])
View(all_genre_top_artist[[8]][[1]])
View((all_genre_top_artist[[8]][[1]])[[13]][[1]])
audio_features <- all_genre_top_artist %>%
select(top.song)
# Unnest della colonna top.song a livello superiore
audio_features <- unnest(audio_features, top.song)
# Eliminazione di colonne rindondanti (che posso causare anche collisioni con il prossimo unnest)
audio_features <- audio_features %>%
select(genre, name, popularity, explicit, song.features)
# Unnest della colonna song.features a livello superiore (data-frame allo stesso livello)
audio_features <- unnest(audio_features, song.features)
# Creazione nuova colonna duration_s (conversione della colonna duration_ms in secondi)
audio_features <- audio_features %>%
mutate(duration_s = map(duration_ms, function(x){x/1000}))
# Assegnazione tipo numerico alla nuova colonna duration_s
audio_features$duration_s <- as.numeric(audio_features$duration_s)
## Analisi caratteristiche di ogni genere
# Creazione data-frame per visualizzazione delle caratteristiche di ogni genere
temp <- names(audio_features)[c(5, 6, 8, 10:15)]
genre_analysis <- audio_features %>%
select(c("genre", temp)) %>%
pivot_longer(cols = temp, values_transform = as.numeric)
# Creazione grafico
genre_analysis %>%
ggplot(aes(x = value)) +
geom_density(aes(color = genre)) +
facet_wrap(~name, ncol = 3, scales = 'free') +
labs(title = 'Genre Characteristic',x = '', y = '') +
theme_bw() +
theme(axis.text.x = element_text(angle = 50, hjust = 1),axis.text.y = element_blank())
audio_features <- all_genre_top_artist %>%
select(top.song)
# Unnest della colonna top.song a livello superiore
audio_features <- unnest(audio_features, top.song)
# Eliminazione di colonne rindondanti (che posso causare anche collisioni con il
# prossimo unnest)
audio_features <- audio_features %>%
select(genre, name, popularity, explicit, song.features)
# Unnest della colonna song.features a livello superiore (data-frame allo stesso livello)
audio_features <- unnest(audio_features, song.features)
# Creazione nuova colonna duration_s (conversione della colonna duration_ms in secondi)
audio_features <- audio_features %>%
mutate(duration_s = map(duration_ms, function(x){x/1000}))
# Assegnazione tipo numerico alla nuova colonna duration_s
audio_features$duration_s <- as.numeric(audio_features$duration_s)
# Analisi caratteristiche di ogni genere
# Creazione data-frame per visualizzazione delle caratteristiche di ogni genere
temp <- names(audio_features)[c(5, 6, 8, 10:15)]
genre_analysis <- audio_features %>%
select(c("genre", temp)) %>%
pivot_longer(cols = temp, values_transform = as.numeric)
# Creazione grafico
genre_analysis %>%
ggplot(aes(x = value)) +
geom_density(aes(color = genre)) +
facet_wrap(~name, ncol = 3, scales = 'free') +
labs(title = 'Genre Characteristic',x = '', y = '') +
theme_bw() +
theme(axis.text.x = element_text(angle = 50, hjust = 1),axis.text.y = element_blank())
audio_features <- all_genre_top_artist %>%
select(top.song)
# Unnest della colonna top.song a livello superiore
audio_features <- unnest(audio_features, top.song)
# Eliminazione di colonne rindondanti (che posso causare anche collisioni con il
# prossimo unnest)
audio_features <- audio_features %>%
select(genre, name, popularity, explicit, song.features)
# Unnest della colonna song.features a livello superiore (data-frame allo stesso livello)
audio_features <- unnest(audio_features, song.features)
# Creazione nuova colonna duration_s (conversione della colonna duration_ms in secondi)
audio_features <- audio_features %>%
mutate(duration_s = map(duration_ms, function(x){x/1000}))
# Assegnazione tipo numerico alla nuova colonna duration_s
audio_features$duration_s <- as.numeric(audio_features$duration_s)
# Analisi caratteristiche di ogni genere
# Creazione data-frame per visualizzazione delle caratteristiche di ogni genere
temp <- names(audio_features)[c(5, 6, 8, 10:15)]
genre_analysis <- audio_features %>%
select(c("genre", temp)) %>%
pivot_longer(cols = temp, values_transform = as.numeric)
# Creazione grafico
genre_analysis %>%
ggplot(aes(x = value)) +
geom_density(aes(color = genre)) +
facet_wrap(~name, ncol = 3, scales = 'free') +
labs(title = 'Genre Characteristic',x = '', y = '') +
theme_bw() +
theme(axis.text.x = element_text(angle = 50, hjust = 1),axis.text.y = element_blank())
library(dplyr)      # Manipolazione dei dati
library(ggplot2)    # Creazione dei grafici
library(purrr)      # Toolkit che aggiunge funzionalità ad R
library(modelr)     # Manipolazione dei dati
library(broom)      # Converte data-frame in strutture dati tipo tibbles
library(tidyr)      # Manipolazione dei dati
library(spotifyr)   # Metodi per utilizzo delle APIs Spotify
library(corrplot)   # Grafici di correlazione
library(DT)         # Stampa tabelle su html
rmarkdown::render("Spotify Data Analysis Markdown.Rmd")
knitr::knit("Spotify Data Analysis Markdown.Rmd")
View(all_genre_top_artist)
all_genre_top_artist <- data.frame() %>%
rbind(pop_top_artist, hip_hop_top_artist, rock_top_artist, metal_top_artist,
latin_top_artist, electronic_top_artist) %>%
group_by(genre)
audio_features <- all_genre_top_artist %>%
select(top.song)
# Unnest della colonna top.song a livello superiore
audio_features <- unnest(audio_features, top.song)
# Eliminazione di colonne rindondanti (che posso causare anche collisioni con il
# prossimo unnest)
audio_features <- audio_features %>%
select(genre, name, popularity, explicit, song.features)
# Unnest della colonna song.features a livello superiore (data-frame allo stesso livello)
audio_features <- unnest(audio_features, song.features)
# Creazione nuova colonna duration_s (conversione della colonna duration_ms in secondi)
audio_features <- audio_features %>%
mutate(duration_s = map(duration_ms, function(x){x/1000}))
# Assegnazione tipo numerico alla nuova colonna duration_s
audio_features$duration_s <- as.numeric(audio_features$duration_s)
# Analisi caratteristiche di ogni genere
# Creazione data-frame per visualizzazione delle caratteristiche di ogni genere
temp <- names(audio_features)[c(5, 6, 8, 10:15)]
genre_analysis <- audio_features %>%
select(c("genre", temp)) %>%
pivot_longer(cols = temp, values_transform = as.numeric)
# Creazione grafico
genre_analysis %>%
ggplot(aes(x = value)) +
geom_density(aes(color = genre)) +
facet_wrap(~name, ncol = 3, scales = 'free') +
labs(title = 'Genre Characteristic',x = '', y = '') +
theme_bw() +
theme(axis.text.x = element_text(angle = 50, hjust = 1),axis.text.y = element_blank())
audio_features <- all_genre_top_artist %>%
select(top.song)
# Unnest della colonna top.song a livello superiore
audio_features <- unnest(audio_features, top.song)
# Eliminazione di colonne rindondanti (che posso causare anche collisioni con il prossimo unnest)
audio_features <- audio_features %>%
select(genre, name, popularity, explicit, song.features)
# Unnest della colonna song.features a livello superiore (data-frame allo stesso livello)
audio_features <- unnest(audio_features, song.features)
# Creazione nuova colonna duration_s (conversione della colonna duration_ms in secondi)
audio_features <- audio_features %>%
mutate(duration_s = map(duration_ms, function(x){x/1000}))
# Assegnazione tipo numerico alla nuova colonna duration_s
audio_features$duration_s <- as.numeric(audio_features$duration_s)
## Analisi caratteristiche di ogni genere
# Creazione data-frame per visualizzazione delle caratteristiche di ogni genere
temp <- names(audio_features)[c(5, 6, 8, 10:15)]
genre_analysis <- audio_features %>%
select(c("genre", temp)) %>%
pivot_longer(cols = temp, values_transform = as.numeric)
# Creazione grafico
genre_analysis %>%
ggplot(aes(x = value)) +
geom_density(aes(color = genre)) +
facet_wrap(~name, ncol = 3, scales = 'free') +
labs(title = 'Genre Characteristic',x = '', y = '') +
theme_bw() +
theme(axis.text.x = element_text(angle = 50, hjust = 1),axis.text.y = element_blank())
save.image("~/Università/DataScience/SpotifyDataScience/datidausare.RData")
knitr::opts_chunk$set(cache = TRUE)
load(file = "datidausare.RData")
#knitr::opts_chunk$set(cache = TRUE)
load(file = "datidausare.RData")
View(all_genre_top_artist)
#knitr::opts_chunk$set(cache = TRUE)
#load(file = "datidausare.RData")
library(dplyr)      # Manipolazione dei dati
library(ggplot2)    # Creazione dei grafici
library(purrr)      # Toolkit che aggiunge funzionalità ad R
library(modelr)     # Manipolazione dei dati
library(broom)      # Converte data-frame in strutture dati tipo tibbles
library(tidyr)      # Manipolazione dei dati
library(spotifyr)   # Metodi per utilizzo delle APIs Spotify
library(corrplot)   # Grafici di correlazione
library(DT)         # Stampa tabelle su html
# Identificatico account Spotify
Sys.setenv(SPOTIFY_CLIENT_ID = '4c0f54d6d78649bc871e2078d15d0b4e')
# Codice personale per utilizzo APIs
Sys.setenv(SPOTIFY_CLIENT_SECRET = 'b9d8dff917b047df9cd9882703a8d77a')
# Restituisce il token
access_token <- get_spotify_access_token()
# Unico dataset
all_genre_top_artist <- data.frame() %>%
rbind(pop_top_artist, hip_hop_top_artist, rock_top_artist, metal_top_artist,
latin_top_artist, electronic_top_artist) %>%
group_by(genre)
audio_features <- all_genre_top_artist %>%
select(top.song)
# Unnest della colonna top.song a livello superiore
audio_features <- unnest(audio_features, top.song)
# Eliminazione di colonne rindondanti (che posso causare anche collisioni con il
# prossimo unnest)
audio_features <- audio_features %>%
select(genre, name, popularity, explicit, song.features)
# Unnest della colonna song.features a livello superiore (data-frame allo stesso livello)
audio_features <- unnest(audio_features, song.features)
# Creazione nuova colonna duration_s (conversione della colonna duration_ms in secondi)
audio_features <- audio_features %>%
mutate(duration_s = map(duration_ms, function(x){x/1000}))
# Assegnazione tipo numerico alla nuova colonna duration_s
audio_features$duration_s <- as.numeric(audio_features$duration_s)
# Analisi caratteristiche di ogni genere
# Creazione data-frame per visualizzazione delle caratteristiche di ogni genere
temp <- names(audio_features)[c(5, 6, 8, 10:15)]
genre_analysis <- audio_features %>%
select(c("genre", temp)) %>%
pivot_longer(cols = temp, values_transform = as.numeric)
# Creazione grafico
genre_analysis %>%
ggplot(aes(x = value)) +
geom_density(aes(color = genre)) +
facet_wrap(~name, ncol = 3, scales = 'free') +
labs(title = 'Genre Characteristic',x = '', y = '') +
theme_bw() +
theme(axis.text.x = element_text(angle = 50, hjust = 1),axis.text.y = element_blank())
# Unico dataset
all_genre_top_artist <- data.frame() %>%
rbind(pop_top_artist, hip_hop_top_artist, rock_top_artist, metal_top_artist,
latin_top_artist, electronic_top_artist) %>%
group_by(genre)
audio_features <- all_genre_top_artist %>%
select(top.song)
# Unnest della colonna top.song a livello superiore
audio_features <- unnest(audio_features, top.song)
# Eliminazione di colonne rindondanti (che posso causare anche collisioni con il
# prossimo unnest)
audio_features <- audio_features %>%
select(genre, name, popularity, explicit, song.features)
# Unnest della colonna song.features a livello superiore (data-frame allo stesso livello)
audio_features <- unnest(audio_features, song.features)
# Creazione nuova colonna duration_s (conversione della colonna duration_ms in secondi)
audio_features <- audio_features %>%
mutate(duration_s = map(duration_ms, function(x){x/1000}))
# Assegnazione tipo numerico alla nuova colonna duration_s
audio_features$duration_s <- as.numeric(audio_features$duration_s)
# Analisi caratteristiche di ogni genere
# Creazione data-frame per visualizzazione delle caratteristiche di ogni genere
temp <- names(audio_features)[c(5, 6, 8, 10:15)]
genre_analysis <- audio_features %>%
select(c("genre", temp)) %>%
pivot_longer(cols = temp, values_transform = as.numeric)
# Creazione grafico
genre_analysis %>%
ggplot(aes(x = value)) +
geom_density(aes(color = genre)) +
facet_wrap(~name, ncol = 3, scales = 'free') +
labs(title = 'Genre Characteristic',x = '', y = '') +
theme_bw() +
theme(axis.text.x = element_text(angle = 50, hjust = 1),axis.text.y = element_blank())
knit_with_parameters("~/Università/DataScience/SpotifyDataScience/SpotifyDataAnalysisMarkdown.Rmd", encoding = "UTF-8")
